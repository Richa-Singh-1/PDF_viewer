{"ast":null,"code":"var _jsxFileName = \"/Users/singh/Documents/GitHub/React-Query-BoilerPlate/src/components/Post.js\";\nimport React, { useState, useEffect } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { useQuery, QueryClient } from 'react-query';\nconst queryClient = new QueryClient();\n\nconst preFetchRepos = async () => {\n  const response = await fetch(`https://api.github.com/users/mojombo/repos`);\n  const jsonResponse = await response.json(); //jsonResponse.title = `${jsonResponse.title} - ${Math.random().toString(36)}`\n\n  await new Promise(r => setTimeout(r, 10)); // wait a second\n\n  console.log(jsonResponse.length);\n  return jsonResponse;\n};\n\nconst prefetchReps = async () => {\n  // The results of this query will be cached like a normal query;\n  await queryClient.prefetchQuery('preFetch', preFetchRepos);\n};\n\nconst preFetchData = () => {\n  prefetchReps();\n};\n\npreFetchData();\n\nconst Post = ({\n  login\n}) => {\n  const [repos, setRepos] = useState([]);\n  const [showRepo, setShowRepos] = useState(false);\n  const [demo, setDemo] = useState(false); //const { status:statuss, data:repos, isFetching:isFetchingg, error } = useQuery('preFetch', preFetchRepos,{staleTime:100000,cacheTime:10000});\n\n  const getPost = async () => {\n    const response = await fetch(`https://api.github.com/users/${login}`);\n    const jsonResponse = await response.json();\n    jsonResponse.title = `${jsonResponse.title} - ${Math.random().toString(36)}`;\n    await new Promise(r => setTimeout(r, 10)); // wait a second\n\n    setRepos(jsonResponse);\n    return jsonResponse;\n  };\n\n  const demo999 = () => {} //await new Promise(r => setTimeout(r, 10000)) // wait a second\n  // const { data:d2 }= useQuery('postmethod', () => PostMethod(userInfo))\n  // const {  data:d3 }= useQuery('postmethoddd', () => PostMethod(userInfo2))\n  // useEffect(()=>{\n  //   // prefetchReps();\n  //   // setTimeout(()=>{\n  //   // },10000);\n  //   demo();\n  // },[])\n  ;\n\n  const PostMethod = async param => {\n    console.log(\"PostMethod\", param);\n    const response = await fetch(`https://reqres.in/api/users`, {\n      method: 'POST',\n      body: JSON.stringify(param)\n    });\n    const jsonResponse = await response.json();\n    jsonResponse.title = `${jsonResponse.title} - ${Math.random().toString(36)}`;\n    await new Promise(r => setTimeout(r, 10)); // wait a second\n\n    console.log('jsonResponse in PostMethod', jsonResponse); //setRepos(jsonResponse);\n\n    return jsonResponse;\n  };\n\n  const clickHandler = () => {\n    setShowRepos(true);\n  };\n\n  const prefetchTodos = async () => {\n    // The results of this query will be cached like a normal query\n    await queryClient.prefetchQuery('todos', PostMethod);\n  }; //https://reqres.in/api/users\n\n\n  const postFunc = reqBody => {//const url = 'https://reqres.in/api/users';\n    //return useQuery('postmethod', PostMethod,{staleTime:100000,cacheTime:100000})\n  };\n\n  const {\n    status,\n    data,\n    isFetching\n  } = useQuery(`post-${login}`, getPost, {\n    staleTime: 100000,\n    cacheTime: 100000\n  }); //postFunc()\n\n  const userInfo = {\n    \"name\": \"morpheus\",\n    \"job\": \"leader\"\n  };\n  const userInfo2 = {\n    \"name\": \"hellooo\",\n    \"job\": \"leader\"\n  }; //const { status, data, isFetching }= useQuery('postmethod', () => PostMethod(userInfo),{staleTime:10000,cacheTime:10000})\n\n  const {\n    data: d1\n  } = useQuery('postmethoddd', () => PostMethod(userInfo2), {\n    staleTime: 10000,\n    cacheTime: 10000\n  });\n\n  if (status === 'loading') {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 12\n      }\n    }, \"loading...\"); // loading state\n  }\n\n  console.log('after useQuery', data, d1);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setDemo(!demo),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }, \"Hello\"), /*#__PURE__*/React.createElement(NavLink, {\n    to: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }, \"Home\"), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }, data.id), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }, data.name), /*#__PURE__*/React.createElement(\"img\", {\n    src: data.avatar_url,\n    alt: \"No image\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }\n  }), isFetching && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 23\n    }\n  }, \"updating...\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: clickHandler,\n    disabled: showRepo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }, \"Click to Display Pre Fetched Repos\"), showRepo && /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 18\n    }\n  }, JSON.stringify(repos)));\n};\n\nexport default Post;","map":{"version":3,"sources":["/Users/singh/Documents/GitHub/React-Query-BoilerPlate/src/components/Post.js"],"names":["React","useState","useEffect","NavLink","useQuery","QueryClient","queryClient","preFetchRepos","response","fetch","jsonResponse","json","Promise","r","setTimeout","console","log","length","prefetchReps","prefetchQuery","preFetchData","Post","login","repos","setRepos","showRepo","setShowRepos","demo","setDemo","getPost","title","Math","random","toString","demo999","PostMethod","param","method","body","JSON","stringify","clickHandler","prefetchTodos","postFunc","reqBody","status","data","isFetching","staleTime","cacheTime","userInfo","userInfo2","d1","id","name","avatar_url"],"mappings":"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","sourcesContent":["import React, {useState,useEffect} from 'react'\nimport { NavLink } from 'react-router-dom'\nimport { useQuery,QueryClient } from 'react-query'\n\nconst queryClient = new QueryClient()\nconst preFetchRepos = async () =>{\n  const response = await fetch(`https://api.github.com/users/mojombo/repos`)\n  const jsonResponse = await response.json()\n  //jsonResponse.title = `${jsonResponse.title} - ${Math.random().toString(36)}`\n\n  await new Promise(r => setTimeout(r, 10)) // wait a second\n  console.log(jsonResponse.length)\n  return jsonResponse\n}\n\nconst prefetchReps = async () => {\n  // The results of this query will be cached like a normal query;\n  await queryClient.prefetchQuery('preFetch', preFetchRepos);\n}\nconst preFetchData = () =>{\n  prefetchReps();\n}\npreFetchData();\nconst Post = ({ login }) => {\n  const [repos,setRepos] = useState([]);\n  const [showRepo,setShowRepos] = useState(false);\n  const [demo,setDemo] =useState(false);\n  //const { status:statuss, data:repos, isFetching:isFetchingg, error } = useQuery('preFetch', preFetchRepos,{staleTime:100000,cacheTime:10000});\n  \n  const getPost = async () => {\n    const response = await fetch(`https://api.github.com/users/${login}`)\n    const jsonResponse = await response.json()\n    jsonResponse.title = `${jsonResponse.title} - ${Math.random().toString(36)}`\n\n    await new Promise(r => setTimeout(r, 10)) // wait a second\n    setRepos(jsonResponse);\n    return jsonResponse\n  }\n\n  const demo999 =  () =>{\n    //await new Promise(r => setTimeout(r, 10000)) // wait a second\n      // const { data:d2 }= useQuery('postmethod', () => PostMethod(userInfo))\n      // const {  data:d3 }= useQuery('postmethoddd', () => PostMethod(userInfo2))\n  }\n  // useEffect(()=>{\n  //   // prefetchReps();\n  //   // setTimeout(()=>{\n      \n  //   // },10000);\n  //   demo();\n    \n  // },[])\n\n  const PostMethod = async (param) => {\n    console.log(\"PostMethod\",param)\n    \n    const response = await fetch(`https://reqres.in/api/users`,{\n      method:'POST',\n      body:JSON.stringify(param)\n    })\n    const jsonResponse = await response.json()\n    jsonResponse.title = `${jsonResponse.title} - ${Math.random().toString(36)}`\n\n    await new Promise(r => setTimeout(r, 10)) // wait a second\n    console.log('jsonResponse in PostMethod',jsonResponse)\n    //setRepos(jsonResponse);\n    return jsonResponse\n  }\n\n  const clickHandler = () =>{\n    setShowRepos(true)\n  }\n\n  const prefetchTodos = async () => {\n    // The results of this query will be cached like a normal query\n    await queryClient.prefetchQuery('todos', PostMethod)\n  }\n  //https://reqres.in/api/users\n\n  const postFunc = (reqBody) =>{\n    //const url = 'https://reqres.in/api/users';\n\n    //return useQuery('postmethod', PostMethod,{staleTime:100000,cacheTime:100000})\n    \n  }\n\n  \n  const { status, data, isFetching } = useQuery(`post-${login}`, getPost,{staleTime:100000,cacheTime:100000})\n  //postFunc()\n  const userInfo = {\n    \"name\": \"morpheus\",\n    \"job\": \"leader\"\n}\n\nconst userInfo2 = {\n  \"name\": \"hellooo\",\n  \"job\": \"leader\"\n}\n  //const { status, data, isFetching }= useQuery('postmethod', () => PostMethod(userInfo),{staleTime:10000,cacheTime:10000})\n  const {  data:d1 }= useQuery('postmethoddd', () => PostMethod(userInfo2),{staleTime:10000,cacheTime:10000})\n  if (status === 'loading') {\n    return <div>loading...</div> // loading state\n  }\n  console.log('after useQuery',data,d1);\n  return (\n    <div>\n      <button onClick={() =>setDemo(!demo)}>Hello</button>\n      <NavLink to=\"/\">Home</NavLink>\n      <h1>{data.id}</h1>\n      <p>{data.name}</p>\n      <img src={data.avatar_url}  alt=\"No image\"/>\n      { isFetching && <p>updating...</p> }\n      <br />\n      \n      <button onClick ={clickHandler} disabled ={showRepo}>Click to Display Pre Fetched Repos</button>\n  { showRepo && (<code>{JSON.stringify(repos)}</code>)\n\n      }\n    </div>\n  )\n}\n\nexport default Post\n"]},"metadata":{},"sourceType":"module"}