{"ast":null,"code":"var _jsxFileName = \"/Users/singh/Documents/GitHub/React-Query-BoilerPlate/src/components/Home.js\";\nimport React, { useState, useEffect } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { useQuery } from 'react-query';\nimport { useIsFetching } from 'react-query';\n\nconst getPosts = async () => {\n  console.log('Called 1');\n  const response = await fetch('https://api.github.com/users');\n  await new Promise(r => setTimeout(r, 10)); // wait a second\n\n  return response.json();\n};\n\nconst getPosts2 = async () => {\n  console.log('Called 2');\n  const response = await fetch('https://api.github.com/users');\n  await new Promise(r => setTimeout(r, 10)); // wait a second\n\n  return response.json();\n};\n\nconst getPosts3 = async () => {\n  console.log('Called 3');\n  const response = await fetch('https://api.github.com/users');\n  await new Promise(r => setTimeout(r, 10)); // wait a second\n\n  return response.json();\n};\n\nfunction Home() {\n  const [criteria, setCriteria] = useState('Richa');\n  const {\n    status,\n    data,\n    isFetching,\n    error\n  } = useQuery(['posts', criteria.length > 5], getPosts, {\n    staleTime: 10000,\n    cacheTime: 1000000\n  }); // const { status2, data2, isFetching2, error2 } = useQuery(['common','hello'], getPosts2,{refetchOnWindowFocus:false})\n  // const { status3, data3, isFetching3, error3 } = useQuery(['common','posts'], getPosts3,{refetchOnWindowFocus:false})\n  //const { status, data, isFetching, error } = useQuery(['common','postss'], getPosts3,{refetchOnWindowFocus:false})\n  //const isFetchingPosts = useIsFetching(['posts'])\n  // const isFetchingPosts2 = useIsFetching(['hello'],{exact:false})\n  //{queryKey:['posts','post2']}\n  // useEffect(()=>{\n  //console.log ('isFetchingPosts home',isFetchingPosts);\n  // },[isFetchingPosts]);\n\n  const isFetchingPosts = useIsFetching(['common']);\n  console.log('isFetchingPosts home', isFetchingPosts);\n\n  if (status === 'loading') {\n    //setCriteria(true);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 12\n      }\n    }, \"loading...\"); // loading state\n  }\n\n  if (status === 'error') {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 12\n      }\n    }, error.message); // error state\n  }\n\n  const handleChange = event => {\n    setCriteria(event.target.value);\n  };\n\n  const clickHandler = () => {\n    console.log('Click');\n    getPosts();\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: clickHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, \"React Query\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: criteria,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }), data && /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }\n  }, data.slice(0, 10) // only take frist 10 for now\n  .map(d => /*#__PURE__*/React.createElement(\"li\", {\n    key: `post-${d.login}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(NavLink, {\n    to: `/users/${d.login}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }, d.login))) // render list of titles\n  ), isFetching && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 23\n    }\n  }, \"updating...\"));\n}\n\nexport default Home;\n/*\n\n// Get the user\n const { data: user } = useQuery(['user', email], getUserByEmail)\n \n const userId = user?.id\n \n // Then get the user's projects\n const { isIdle, data: projects } = useQuery(\n   ['projects', userId],\n   getProjectsByUser,\n   {\n     // The query will not execute until the userId exists\n     enabled: !!userId,\n   }\n )\n\n\n\n\n*/","map":{"version":3,"sources":["/Users/singh/Documents/GitHub/React-Query-BoilerPlate/src/components/Home.js"],"names":["React","useState","useEffect","NavLink","useQuery","useIsFetching","getPosts","console","log","response","fetch","Promise","r","setTimeout","json","getPosts2","getPosts3","Home","criteria","setCriteria","status","data","isFetching","error","length","staleTime","cacheTime","isFetchingPosts","message","handleChange","event","target","value","clickHandler","slice","map","d","login"],"mappings":"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","sourcesContent":["import React , {useState,useEffect} from 'react'\nimport { NavLink } from 'react-router-dom'\nimport { useQuery } from 'react-query'\nimport { useIsFetching } from 'react-query'\n\nconst getPosts = async () => {\n  console.log('Called 1');\n  const response = await fetch('https://api.github.com/users')\n  await new Promise(r => setTimeout(r, 10)) // wait a second\n  return response.json()\n};\n\nconst getPosts2 = async () => {\n  console.log('Called 2');\n  const response = await fetch('https://api.github.com/users')\n  await new Promise(r => setTimeout(r, 10)) // wait a second\n  return response.json()\n};\n\nconst getPosts3 = async () => {\n  console.log('Called 3');\n  const response = await fetch('https://api.github.com/users')\n  await new Promise(r => setTimeout(r, 10)) // wait a second\n  return response.json()\n};\n\nfunction Home() {\n  const [criteria, setCriteria] = useState('Richa');\n  const { status, data, isFetching, error } = useQuery(['posts',criteria.length>5], getPosts,{staleTime:10000,cacheTime:1000000})\n  // const { status2, data2, isFetching2, error2 } = useQuery(['common','hello'], getPosts2,{refetchOnWindowFocus:false})\n  // const { status3, data3, isFetching3, error3 } = useQuery(['common','posts'], getPosts3,{refetchOnWindowFocus:false})\n  //const { status, data, isFetching, error } = useQuery(['common','postss'], getPosts3,{refetchOnWindowFocus:false})\n\n  \n  //const isFetchingPosts = useIsFetching(['posts'])\n  // const isFetchingPosts2 = useIsFetching(['hello'],{exact:false})\n  //{queryKey:['posts','post2']}\n  \n  // useEffect(()=>{\n    //console.log ('isFetchingPosts home',isFetchingPosts);\n  // },[isFetchingPosts]);\n  \n  const isFetchingPosts = useIsFetching(['common'])\n  console.log ('isFetchingPosts home',isFetchingPosts);\n  if (status === 'loading') {\n    //setCriteria(true);\n    return <div>loading...</div> // loading state\n  }\n\n\n  if (status === 'error') {\n    return <div>{error.message}</div> // error state\n  }\n\n  const handleChange = (event) =>{\n    setCriteria(event.target.value);\n  }\n  const clickHandler = () => {\n    console.log('Click');\n    getPosts();\n  }\n\n  \n\n  return (\n    <div>\n      <button onClick ={clickHandler}>React Query</button>\n      <input type=\"text\" value={criteria} onChange={handleChange} />\n      { data && <ul>{\n        data\n          .slice(0,10) // only take frist 10 for now\n          .map(d => <li key={`post-${d.login}`}>\n            <NavLink to={`/users/${d.login}`}>{d.login}</NavLink>\n          </li>) // render list of titles\n      }</ul> }\n      { isFetching && <p>updating...</p> }\n    </div>\n  );\n}\n\nexport default Home\n\n\n/*\n\n// Get the user\n const { data: user } = useQuery(['user', email], getUserByEmail)\n \n const userId = user?.id\n \n // Then get the user's projects\n const { isIdle, data: projects } = useQuery(\n   ['projects', userId],\n   getProjectsByUser,\n   {\n     // The query will not execute until the userId exists\n     enabled: !!userId,\n   }\n )\n\n\n\n\n*/"]},"metadata":{},"sourceType":"module"}