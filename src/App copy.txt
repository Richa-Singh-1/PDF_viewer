/*eslint-disable*/
import { IonContent, IonHeader, IonPage, IonTitle, IonToolbar } from '@ionic/react';
import { Chart } from '@antv/g2';
import './App.css';
import React, { useEffect, useState } from 'react';

const dataA = [
  { Data: '1991', sales: 2 },
  { Data: '1992', sales: 8 },
  { Data: '1993', sales: 9 },
  { Data: '1994', sales: 11 },
  { Data: '1995', sales: 6.2 },
  { Data: '1996', sales: 6.5 },
  { Data: '1997', sales: 6 },
  { Data: '1998', sales: 9 },
  { Data: '1999', sales: 13 },
];

// const dataB = [
//   { item: 'A', count: 40, percent: 0.4 },
//   { item: 'B', count: 21, percent: 0.21 },
//   { item: 'C', count: 17, percent: 0.17 },
//   { item: 'D', count: 13, percent: 0.13 },
//   { item: 'E', count: 9, percent: 0.09 },
// ];

const data = [
  { type: 'A', value: 34, color: 'red' },
  { type: 'B', value: 43, color: 'green' },
  { type: 'C', value: 23, color: 'yellow' },
];

let flag = false;
// let ChartB=null;

const App: React.FC = () => {

  useEffect(() => {
    const chartA = new Chart({
      container: 'container', // Specify chart container ID
      width: 600, // Specify chart width
      height: 300, // Specify chart height
    });

    chartA.data(dataA);
    chartA.scale('Data', {
      range: [0, 1],
      tickCount: 10,
      type: 'timeCat'
    });
    chartA.scale('sales', {
      nice: true,
    });
    chartA.axis('sales', {
      label: {
        formatter: text => {
          return text.replace(/(\d)(?=(?:\d{3})+$)/g, '$1,');
        }
      }
    });


    chartA.tooltip({
      shared: true,
      showCrosshairs: true,
      customContent: (name, items) => {
        const container = document.createElement('div');
        container.className = 'g2-tooltip';

        const title = `<div class="g2-tooltip-title" style="margin-top: 12px;margin-bottom: 12px;">${name}</div>`;
        let listItem = '';
        items.forEach((item) => {
          listItem += `<li class="g2-tooltip-list-item" data-index={index} style="margin-bottom:4px;display:flex;align-items: center;">
          <span style="background-color:${item?.mappingData?.color || item?.color};" class="g2-tooltip-marker"></span>
              <span style="display:inline-flex;flex:1;justify-content:space-between">
              <span style="margin-right: 16px;">${item?.name}:</span><span>${item?.value}</span>
              </span>
          </li>`;
        });
        container.innerHTML = title + listItem;
        // console.log('flag ', flag);
        return container;
      },
    });

    chartA.on('plot:touchend', () => {
      setTimeout(() => {
        chartA.controllers[2].destroy();
      }, 250);
    });
    chartA.line().position('Data*sales');
    chartA.area().position('Data*sales');
    chartA.render();


    /******** PIE CHARTTTT */

    const chart = new Chart({
      container: 'container',
      autoFit: true,
      height: 500
    });
    chart.data(data);
    chart.legend(false);
    chart.tooltip(false);

    chart.facet('rect', {
      padding: 20,
      fields:[],
      showTitle: false,
      eachView: (view, facet) => {
        console.log(view,facet)
        view.coordinate('theta', {
          radius: 0.8,
          innerRadius: 0.5
        });
        view
          .interval()
          .adjust('stack')
          .position('value')
          .color('color')
          .style({
            opacity: 0,
          });


          view.interaction('element-highlight-by-color', {
            start: [{ trigger: 'element:mousedown', action: 'element-highlight-by-color:highlight' }],
            end: [{ trigger: 'element:mouseup', action: 'element-highlight-by-color:highlight' }],
          });
          // view.interaction('element-highlight-by-color', {
          //   start: [{ trigger: 'element:touchstart', action: 'element-highlight-by-color:highlight' }],
          //   end: [{ trigger: 'element:touchend', action: 'element-highlight-by-color:reset' }],
          // });

        view.interaction('element-active');
      }
    });

    chart.on('element:mousedown', (event) => {
      const { data: newData } = event;
      chart.annotation().clear(true);
      chart.annotation().text({
        position: ['50%', '50%'],
        content: newData.data.value,
        style: {
          fontSize: 12,
          fill: '#8c8c8c',
          fontWeight: 300,
          textBaseline: 'bottom',
          textAlign: 'center'
        },
        offsetY: -12,
      });
      chart.changeData(data);
    });

    chart.on('element:touchstart', (event) => {
      const { data: newData } = event;
      chart.annotation().clear(true);
      chart.annotation().text({
        position: ['50%', '50%'],
        content: newData.data.value,
        style: {
          fontSize: 12,
          fill: '#8c8c8c',
          fontWeight: 300,
          textBaseline: 'bottom',
          textAlign: 'center'
        },
        offsetY: -12,
      });
      chart.changeData(data);
    });


    chart.annotation().text({
      position: ['50%', '50%'],
      content: '0',
      style: {
        fontSize: 12,
        fill: '#8c8c8c',
        fontWeight: 300,
        textBaseline: 'bottom',
        textAlign: 'center'
      },
      offsetY: -12,
    });

    chart.render();

  }, []);
  // useEffect(()=>{
  //   ChartB.
  // },[percentage])

  return (
    <IonPage>
      <IonHeader collapse="condense">
        <IonToolbar>
          {/* <IonTitle size="large"></IonTitle> */}
        </IonToolbar>
      </IonHeader>
      <IonContent fullscreen className="home-container">
        <div className="home-section">HEADER AREA</div>
        <div id="container" />
        <div id="containerB" />
      </IonContent>
    </IonPage>
  );
};

export default App;